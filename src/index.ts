import { app, BrowserWindow, ipcMain } from 'electron';
import fetch from 'electron-fetch';
require('dotenv').config();
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
    // eslint-disable-line global-require
    app.quit();
}

let mainWindow: BrowserWindow;
const createWindow = (): void => {
    // Create the browser window.
    mainWindow = new BrowserWindow({
        height: 600,
        width: 800,
        webPreferences: {
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY
        }
    });
    mainWindow.removeMenu();

    // and load the index.html of the app.
    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
const onReady = () => {
    createWindow();
    getLightInfo();
}
app.on('ready', onReady);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
        app.quit();
    }
});

app.on('activate', () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow();
    }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

const HUE_INFO = {
    USERNAME: process.env.HUE_BRIDGE_USER,
    HOST: process.env.HUE_BRIDGE_IP,
    LIGHT_NAMES: process.env.STATUS_LIGHT_NAMES_CSV.split(','),
};
let relevantLightIDs: Array<string>;
const getLightInfo = async () => {
    console.log(`Getting relevant Light IDs from Hue bridge at \`${HUE_INFO.HOST}\`...`);
    relevantLightIDs = [];
    try {
        const response = await fetch(`http://${HUE_INFO.HOST}/api/${HUE_INFO.USERNAME}/lights`);
        const lightsJSON: any = await response.json();
        const keys = Object.keys(lightsJSON);
        for (let i = 0; i < keys.length; i++) {
            if (HUE_INFO.LIGHT_NAMES.includes(lightsJSON[keys[i]].name)) {
                relevantLightIDs.push(keys[i]);
            }
        }
        console.log(`Got relevant Light IDs:\n${JSON.stringify(relevantLightIDs)}`);
    } catch (err) {
        console.error(err);
    }
}

import { LightState, BUSY_LIGHT_STATE, UNCERTAIN_LIGHT_STATE, FREE_LIGHT_STATE, NORMAL_LIGHT_STATE, OFF_LIGHT_STATE } from './lightStates';
const setLightState = async (newLightState: LightState) => {
    if (!(relevantLightIDs && relevantLightIDs.length)) {
        console.error(`No light info available!`);
        return false;
    }

    let failed = false;
    relevantLightIDs.forEach(async (lightID) => {
        const url = `http://${HUE_INFO.HOST}/api/${HUE_INFO.USERNAME}/lights/${lightID}/state`;
        const body = JSON.stringify(newLightState);
        failed = failed || !(await fetch(url, {
            method: 'put',
            body
        }));
    });

    if (failed) {
        return undefined;
    } else {
        return newLightState;
    }
}

ipcMain.handle('setLightState', async (event, arg) => {
    let result = undefined;
    switch (arg) {
        case "off":
            result = await setLightState(OFF_LIGHT_STATE);
            break;
        case "normal":
            result = await setLightState(NORMAL_LIGHT_STATE);
            break;
        case "free":
            result = await setLightState(FREE_LIGHT_STATE);
            break;
        case "uncertain":
            result = await setLightState(UNCERTAIN_LIGHT_STATE);
            break;
        case "busy":
            result = await setLightState(BUSY_LIGHT_STATE);
            break;
        default:
            console.warn(`\`setLightState()\` called with unknown argument:\n${arg}`);
            break;
    }

    return result;
});

ipcMain.handle('getCurrentLightState', async (event, arg) => {
    if (!(relevantLightIDs && relevantLightIDs.length)) {
        return undefined;
    }

    try {
        const response = await fetch(`http://${HUE_INFO.HOST}/api/${HUE_INFO.USERNAME}/lights/${relevantLightIDs[0]}`);
        const lightsJSON = await response.json();
        return lightsJSON.state;
    } catch (err) {
        console.error(err);
    }

    return undefined;
});
